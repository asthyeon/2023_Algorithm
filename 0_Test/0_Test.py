import sys
sys.stdin = open('input.txt')
input = sys.stdin.readline

"""
# 우리가 2 * N 배열에 사자를 배치하는 경우의 수가 몇가지인가?
1. 가로 2칸 세로 N 칸
2. 사자들은 가로로도 세로로도 붙어 있을 수 없음
3. 사자를 한 마리도 배치하지 않는 경우도 하나의 경우의 수
4. 사자를 배치하는 경우의 수를 9901로 나눠서 출력
@ 풀이
(1) dp로 풀기
- 크기가 5일 때
    - 0마리: 1
    - 1마리: 10
    - 2마리: 7 + 7 + 5 + 5 + 3 + 3 + 1 + 1 = 32
    - 3마리: 5 + 3 + 3 + 1 + 1 + 5 + 3 + 3 + 1 + 1
             3 + 1 + 1 + 3 + 1 + 1 + 1 + 1 = 38
    - 4마리: 3 + 1 + 1 + 1 + 1 + 3 + 1 + 1 + 1 + 1 + 1 + 1 = 16
    - 5마리: 2
- 크기가 4일 때
    - 0마리: 1
    - 1마리: 8
    - 2마리: 5 + 5 + 3 + 3 + 1 + 1 = 18
    - 3마리: 3 + 1 + 1 + 3 + 1 + 1 + 1 + 1 = 12
    - 4마리: 1 + 1 = 2
- 크기가 3일 때
    - 0마리: 1
    - 1마리: 6
    - 2마리: 3 + 3 + 1 + 1 = 8
    - 3마리: 1 + 1 = 2
- 크기가 2일 때
    - 0마리: 1
    - 1마리: 4
    - 2마리: 1 + 1 = 2
- 1: 1, 2 -> 3
    +4 = 3 + 1
- 2: 1, 4, 2 -> 7
    +10 = 7 + 3
- 3: 1, 6, 8, 2 -> 17
    +24 = 17 + 7
- 4: 1, 8, 18, 12, 2 -> 41
    +58 = 41 + 17
- 5: 1, 10, 32, 38, 16, 2 -> 99
(2) dp의 값: 경우의 수, dp의 인덱스: 울타리 크기
dp[i] = dp[i - 1] * 2 + dp[i - 2]
"""


# dp 함수
def dynamic_programming(N):
    dp = [0] * (N + 1)
    # dp[0]은 1 (울타리에 크기가 0 이어도 한 마리도 배치하지 않는 경우의 수 1 존재)
    dp[0] = 1
    # dp[1]은 3 (dp[i - 2]를 구할 수 없으므로 미리 정의)
    dp[1] = 3
    # dp 계산
    for i in range(2, N + 1):
        dp[i] = ((dp[i - 1] * 2) + dp[i - 2]) % 9901

    return dp[N]


# 우리의 세로 크기 N
N = int(input())

print(dynamic_programming(N))
