import sys
sys.stdin = open('input.txt')
input = sys.stdin.readline

"""
# k원이 되는 경우의 수 구하기
1. n 가지 종류의 동전 존재
2. 각각의 동전의 가치가 다름
3. 총 가치의 합이 k원이 되도록 하고 싶음
4. 각각의 동전은 몇 개라도 사용할 수 있음
@ 풀이
(1) dp 사용
 - 예제 경우의 수
  1.  1 10개  2  0개  3  0개  
  2.  1  8개  2  1개  3  0개
  3.  1  6개  2  2개  3  0개
  4.  1  4개  2  3개  3  0개
  5.  1  2개  2  4개  3  0개
  6.  1  0개  2  5개  3  0개
  7.  1  0개  2  0개  3  2개
  8.  1  1개  2  2개  3  1개
  9.  1  3개  2  1개  3  1개
  10. 1  5개  2  0개  3  1개
 - dp의 배열의 인덱스는 k로 둘 때
   dp[1] =  1 (1 * 1)
   dp[2] =  2 (2 * 1), (1 * 2)
   dp[3] =  2 (2 * 1 + 1 * 1), (1 * 3)
   dp[4] =  3 (2 * 2), (2 * 1 + 1 * 1), (1 * 4) 
   dp[5] =  4 (5 * 1), (2 * 2 + 1 * 1), (2 * 1 + 1 * 3), (1 * 5)
   dp[6] =  5 (5 * 1 + 1 * 1), (2 * 3), (2 * 2 + 1 * 2), (2 * 1 + 1 * 4),
              (1 * 6)
   dp[7] =  6 (5 * 1 + 2 * 1), (5 * 1 + 1 * 2), (2 * 3 + 1 * 1), (2 * 2 + 1 * 3),
              (2 * 1 + 1 * 5), (1 * 7)
   dp[8] =  7 (5 * 1 + 2 * 1 + 1 * 1), (5 * 1 + 1 * 3), (2 * 4), (2 * 3 + 1 * 2),
              (2 * 2 + 1 * 4), (2 * 1 + 1 * 6), (1 * 8)
   dp[9] =  8 (5 * 1 + 2 * 2), (5 * 1 + 2 * 1 + 1 * 2), (5 * 1, 1 * 4),
              (2 * 4 + 1 * 1), (2 * 3 + 1 * 3), (2 * 2 + 1 * 5), (2 * 1 + 1 * 7),
              (1 * 9) 
   dp[10] = 10 (5 * 2), (5 * 1 + 2 * 2 + 1 * 1), (5 * 1 + 2 * 1 + 1 * 3),
               (5 * 1 + 1 * 5), (2 * 5), (2 * 4 + 1 * 2), (2 * 3 + 1 * 4),
               (2 * 2 + 1 * 6), (2 * 1 + 1 * 8), (1 * 10)
"""


# dp 함수
def dynamic_programming(k, values):
    dp = [0] * (k + 1)
    # 자기 자신의 값
    dp[0] = 1
    # 각 코인으로 순회를 돌기
    for value in values:
        for sum in range(1, k + 1):
            # 합이 해당 코인보다 크거나 같을 때
            if sum >= value:
                dp[sum] += dp[sum - value]

    return dp[k]


# 종류 가지 수 n 개, 총 가치의 합 k 원
n, k = map(int, input().split())
# 각각의 동전의 가치
values = []
for _ in range(n):
    v = int(input())
    values.append(v)
# 오름차순 정렬
values.sort()

print(dynamic_programming(k, values))